
///
/// generated by <#=ProgramName#> on <#=DateTime.Now#>
///

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Data;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;

namespace <#=Namespace#>
{
    public partial class <#=SourceDbContext#> : DbContext
    {

   //    public <#=SourceDbContext#>()
   //    {
   //    }

   //     public <#=SourceDbContext#>(DbContextOptions<<#=SourceDbContext#>> options)
   //        : base(options)
   //     {
   //     }               

   //     protected override void OnModelCreating(ModelBuilder modelBuilder)
   //     {                       
   //
   //         base.OnModelCreating(modelBuilder);
   //     }

<# foreach (var sp in SpList){ #>
        <#=sp.GetMethodDefinition()#>(<# foreach (var p in sp.Params){ #><#=(p.Order == "1" ? "" : "," )#><#=(p.IsOutput ? "ref " : "" )#><#=p.Type#> <#=p.Param#><#}#>)<#if (sp.HasReturnValue){#> where T : class<#}#>
        {

<#if (sp.Params.Count > 0) {#>
                // Parameters
<# foreach (var p in sp.Params){ #>
                OracleParameter p_<#=p.Param#> = new OracleParameter();
                p_<#=p.Param#>.Direction = ParameterDirection.<#=(p.IsOutput ? "Output" : "Input")#>;
                p_<#=p.Param#>.OracleDbType = OracleDbType.<#=p.DbType#>;
                p_<#=p.Param#>.Value = <#=p.Param#> ?? (object)DBNull.Value;
                p_<#=p.Param#>.ParameterName = "<#=p.Param#>";
                <#=(p.DbType == "Array" ? $@"p_{p.Param}.UdtTypeName=""{p.Param}"";" : "" )#>
               
<# }#><#}#>

                // Processing 
                string sqlQuery = $@"BEGIN <#=sp.Name#>(<# foreach (var p in sp.Params){#><#=(p.Order == "1" ? ":" : ", :" )#><#=p.Param#><#=(p.IsOutput ? " OUTPUT" : "" )#><#}#>); END;";


                <#if (sp.HasReturnValue)  {#>
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#> );

                return await res.ToListAsync(); 
                    
                <#}#>

                <#if (!sp.HasReturnValue)  {#>
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery <# foreach (var p in sp.Params){ #>, p_<#=p.Param#> <#}#> );
                    
                <#}#>
        }

<# }#>

    }
}
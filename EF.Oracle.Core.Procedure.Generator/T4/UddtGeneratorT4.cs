// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 17.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace EF.Oracle.Core.Procedure.Generator.T4
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public partial class UddtGeneratorT4 : UddtGeneratorT4Base
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("\n///\n/// generated by ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(ProgramName));
            
            #line default
            #line hidden
            this.Write(" on ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(DateTime.Now));
            
            #line default
            #line hidden
            this.Write("\n///\n\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\n");
            this.Write("\nusing System;\nusing System.Data;\nusing System.Collections.Generic;\nusing System." +
                    "Threading.Tasks;\nusing Microsoft.EntityFrameworkCore;\nusing Oracle.ManagedDataAc" +
                    "cess.Client;\nusing Oracle.ManagedDataAccess.Types;\n\nnamespace ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            
            #line default
            #line hidden
            this.Write("\n{\n    public partial class ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SourceDbContext));
            
            #line default
            #line hidden
            this.Write(" : DbContext\n    {\n\n   //    public ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SourceDbContext));
            
            #line default
            #line hidden
            this.Write("()\n   //    {\n   //    }\n\n   //     public ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SourceDbContext));
            
            #line default
            #line hidden
            this.Write("(DbContextOptions<");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(SourceDbContext));
            
            #line default
            #line hidden
            this.Write(@"> options)
   //        : base(options)
   //     {
   //     }               

   //     protected override void OnModelCreating(ModelBuilder modelBuilder)
   //     {                       
   //
   //         base.OnModelCreating(modelBuilder);
   //     }

");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
foreach (var uddt in Uddts){ 
            
            #line default
            #line hidden
            this.Write("\n       \n\n        #region ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write("\n\n        public class ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write(" : INullable, IOracleCustomType\n        {\n           \n            ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
foreach (var p in uddt.Params){ 
            
            #line default
            #line hidden
            this.Write("    \n                private ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Type));
            
            #line default
            #line hidden
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((uddt.IsAnArray ? "[]" : "" )));
            
            #line default
            #line hidden
            this.Write(" _");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(";\n\n                ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((p.Length != null && p.Length != "0" ? $"/// <summary> Max Length: {p.Length} </summary>" : "" )));
            
            #line default
            #line hidden
            this.Write(" \n                ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
if (p.DbType == "Array") {
            
            #line default
            #line hidden
            this.Write("\n                [OracleArrayMapping] ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
}
            
            #line default
            #line hidden
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 else {
            
            #line default
            #line hidden
            this.Write(" [OracleObjectMapping(\"");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("\")]");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write("\n                public ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Type));
            
            #line default
            #line hidden
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((uddt.IsAnArray ? "[]" : "" )));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("\n                {\n                    get => _");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(";\n                    set\n                    {\n                        try\n     " +
                    "                   {\n                            ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
if (p.Length != null && p.Length != "0") {
            
            #line default
            #line hidden
            this.Write("\n                                if (");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(" != null && ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(".Length > ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Length));
            
            #line default
            #line hidden
            this.Write(")\n                                    throw new Exception($\"String length too lon" +
                    "g. The maximum length valid for ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(" is ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Length));
            
            #line default
            #line hidden
            this.Write(", but ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(" length is [{");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(".Length}].\");\n                            ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
}
            
            #line default
            #line hidden
            this.Write("\n\n                            _");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(" = value;\n                        }\n                        catch (Exception ex)\n" +
                    "                        {\n                            throw new Exception(\"An er" +
                    "ror occurred setting value for ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(".\", ex);\n                        }\n                    }\n                }\n      " +
                    "         \n            ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write("\n\n\n            public void FromCustomObject(OracleConnection con, object pUdt)\n  " +
                    "          {\n                 ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
foreach (var p in uddt.Params){ 
            
            #line default
            #line hidden
            this.Write("\n                 ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
if (p.DbType == "Array") {
            
            #line default
            #line hidden
            this.Write(" OracleUdt.SetValue(con, pUdt, 0, ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
else if (p.Type == "string") {
            
            #line default
            #line hidden
            this.Write("\n                        if(!string.IsNullOrEmpty(");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("))\n                          OracleUdt.SetValue(con, pUdt, \"");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(");");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 else {
            
            #line default
            #line hidden
            this.Write("\n                        OracleUdt.SetValue(con, pUdt, \"");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("\", ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("); ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write("\n            }\n\n            public void ToCustomObject(OracleConnection con, obje" +
                    "ct pUdt)\n            {\n                ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
foreach (var p in uddt.Params){ 
            
            #line default
            #line hidden
            this.Write("\n                ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write(" = (");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Type));
            
            #line default
            #line hidden
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((uddt.IsAnArray ? "[]" : "" )));
            
            #line default
            #line hidden
            this.Write(")OracleUdt.GetValue(con, pUdt, \"");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(p.Param));
            
            #line default
            #line hidden
            this.Write("\");");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write("\n            }\n\n            public bool IsNull { get; private set; }\n\n           " +
                    " public static ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write(" Null\n            {\n                get\n                {\n                    var" +
                    " obj = new ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write(" { IsNull = true };\n                    return obj;\n                }\n           " +
                    " }      \n        }\n\n\n        [OracleCustomTypeMapping(\"");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write("\")]\n        public class ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write("_Factory : IOracleCustomTypeFactory ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture((uddt.IsAnArray ? ",IOracleArrayTypeFactory" : "" )));
            
            #line default
            #line hidden
            this.Write(" \n        {\n           \n           \n            public IOracleCustomType CreateOb" +
                    "ject()\n            {\n                return new ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Name));
            
            #line default
            #line hidden
            this.Write("();\n            }\n\n\n            ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
if (uddt.IsAnArray) {
            
            #line default
            #line hidden
            this.Write(" \n                public Array CreateArray(int numElems)\n                {\n      " +
                    "              return new ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(uddt.Params.First().Param));
            
            #line default
            #line hidden
            this.Write("[numElems];\n                }\n\n                public Array CreateStatusArray(int" +
                    " numElems)\n                {\n                    return null;\n                }\n" +
                    "            ");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write("\n\n        }\n\n        #endregion\n\n");
            
            #line 1 "C:\SD.ICE-Repositories\ef-oracle-core-procedure-generator\EF.Oracle.Core.Procedure.Generator\T4\UddtGeneratorT4.tt"
 }
            
            #line default
            #line hidden
            this.Write("\n\n    }\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "17.0.0.0")]
    public class UddtGeneratorT4Base
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}

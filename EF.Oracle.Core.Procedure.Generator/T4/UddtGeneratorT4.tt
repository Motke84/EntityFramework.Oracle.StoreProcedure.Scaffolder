
///
/// generated by <#=ProgramName#> on <#=DateTime.Now#>
///

<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using System;
using System.Data;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;
using Oracle.ManagedDataAccess.Types;

namespace <#=Namespace#>
{
    public partial class <#=SourceDbContext#> : DbContext
    {

   //    public <#=SourceDbContext#>()
   //    {
   //    }

   //     public <#=SourceDbContext#>(DbContextOptions<<#=SourceDbContext#>> options)
   //        : base(options)
   //     {
   //     }               

   //     protected override void OnModelCreating(ModelBuilder modelBuilder)
   //     {                       
   //
   //         base.OnModelCreating(modelBuilder);
   //     }

<#foreach (var uddt in Uddts){ #>
       

        #region <#=uddt.Name#>

        public class <#=uddt.Name#> : INullable, IOracleCustomType
        {
           
            <#foreach (var p in uddt.Params){ #>    
                private <#=p.Type#><#=(uddt.IsAnArray ? "[]" : "" )#> _<#=p.Param#>;

                <#=(p.Length != null && p.Length != "0" ? $"/// <summary> Max Length: {p.Length} </summary>" : "" )#> 
                <#if (p.DbType == "Array") {#>
                [OracleArrayMapping] <#}#><# else {#> [OracleObjectMapping("<#=p.Param#>")]<# }#>
                public <#=p.Type#><#=(uddt.IsAnArray ? "[]" : "" )#> <#=p.Param#>
                {
                    get => _<#=p.Param#>;
                    set
                    {
                        try
                        {
                            <#if (p.Length != null && p.Length != "0") {#>
                                if (<#=p.Param#> != null && <#=p.Param#>.Length > <#=p.Length#>)
                                    throw new Exception($"String length too long. The maximum length valid for <#=p.Param#> is <#=p.Length#>, but <#=p.Param#> length is [{<#=p.Param#>.Length}].");
                            <#}#>

                            _<#=p.Param#> = value;
                        }
                        catch (Exception ex)
                        {
                            throw new Exception("An error occurred setting value for <#=p.Param#>.", ex);
                        }
                    }
                }
               
            <# }#>


            public void FromCustomObject(OracleConnection con, object pUdt)
            {
                 <#foreach (var p in uddt.Params){ #>
                 <#if (p.DbType == "Array") {#> OracleUdt.SetValue(con, pUdt, 0, <#=p.Param#>);<# }#><#else if (p.Type == "string") {#>
                        if(!string.IsNullOrEmpty(<#=p.Param#>))
                          OracleUdt.SetValue(con, pUdt, "<#=p.Param#>", <#=p.Param#>);<# }#><# else {#>
                        OracleUdt.SetValue(con, pUdt, "<#=p.Param#>", <#=p.Param#>); <# }#> <# }#>
            }

            public void ToCustomObject(OracleConnection con, object pUdt)
            {
                <#foreach (var p in uddt.Params){ #>
                <#=p.Param#> = (<#=p.Type#><#=(uddt.IsAnArray ? "[]" : "" )#>)OracleUdt.GetValue(con, pUdt, "<#=p.Param#>");<# }#>
            }

            public bool IsNull { get; private set; }

            public static <#=uddt.Name#> Null
            {
                get
                {
                    var obj = new <#=uddt.Name#> { IsNull = true };
                    return obj;
                }
            }      
        }


        [OracleCustomTypeMapping("<#=uddt.Name#>")]
        public class <#=uddt.Name#>_Factory : IOracleCustomTypeFactory <#=(uddt.IsAnArray ? ",IOracleArrayTypeFactory" : "" )#> 
        {
           
           
            public IOracleCustomType CreateObject()
            {
                return new <#=uddt.Name#>();
            }


            <#if (uddt.IsAnArray) {#> 
                public Array CreateArray(int numElems)
                {
                    return new <#=uddt.Params.First().Param#>[numElems];
                }

                public Array CreateStatusArray(int numElems)
                {
                    return null;
                }
            <# }#>

        }

        #endregion

<# }#>

    }
}
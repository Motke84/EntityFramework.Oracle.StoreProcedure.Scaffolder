
///
/// generated by EF.Oracle.Core.Procedure.Generator on 11/23/2022 17:53:08
///






using System;
using System.Data;
using System.Collections.Generic;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Oracle.ManagedDataAccess.Client;

namespace OracleDatabase.Models
{
    public partial class ModelContext : DbContext
    {

   //    public ModelContext()
   //    {
   //    }

   //     public ModelContext(DbContextOptions<ModelContext> options)
   //        : base(options)
   //     {
   //     }               

   //     protected override void OnModelCreating(ModelBuilder modelBuilder)
   //     {                       
   //
   //         base.OnModelCreating(modelBuilder);
   //     }


        public async Task<int> USP__MD_CUST_IM_RATIO_UPSERT_Async(Object TT__MD_CUST_IM_RATIO)
        {


                // Parameters

                OracleParameter p_TT__MD_CUST_IM_RATIO = new OracleParameter("TT__MD_CUST_IM_RATIO", TT__MD_CUST_IM_RATIO ?? (object)DBNull.Value);
                p_TT__MD_CUST_IM_RATIO.Direction = ParameterDirection.Input;
                p_TT__MD_CUST_IM_RATIO.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_CUST_IM_RATIO_UPSERT(:TT__MD_CUST_IM_RATIO); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_CUST_IM_RATIO  );
                    
                
        }


        public async Task<List<T>> USP__MD_DAILY_UNIVERSE_GET_Async<T>(DateTime? V_IM_DATE,Object TT__MD_INSTRUMENT_KEY) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_TT__MD_INSTRUMENT_KEY = new OracleParameter("TT__MD_INSTRUMENT_KEY", TT__MD_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_TT__MD_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_TT__MD_INSTRUMENT_KEY.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_DAILY_UNIVERSE_GET(:V_IM_DATE, :TT__MD_INSTRUMENT_KEY); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_TT__MD_INSTRUMENT_KEY  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_DAILY_UNIVERSE_UPSERT_Async(Object TT__MD_DAILY_UNIVERSE,Decimal? T_FILE_TYPE)
        {


                // Parameters

                OracleParameter p_TT__MD_DAILY_UNIVERSE = new OracleParameter("TT__MD_DAILY_UNIVERSE", TT__MD_DAILY_UNIVERSE ?? (object)DBNull.Value);
                p_TT__MD_DAILY_UNIVERSE.Direction = ParameterDirection.Input;
                p_TT__MD_DAILY_UNIVERSE.OracleDbType = OracleDbType.Object;
               

                OracleParameter p_T_FILE_TYPE = new OracleParameter("T_FILE_TYPE", T_FILE_TYPE ?? (object)DBNull.Value);
                p_T_FILE_TYPE.Direction = ParameterDirection.Input;
                p_T_FILE_TYPE.OracleDbType = OracleDbType.Decimal;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_DAILY_UNIVERSE_UPSERT(:TT__MD_DAILY_UNIVERSE, :T_FILE_TYPE); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_DAILY_UNIVERSE , p_T_FILE_TYPE  );
                    
                
        }


        public async Task<List<T>> USP__MD_FX_RATE_GET_BY_DATE_Async<T>(DateTime? V_IM_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_FX_RATE_GET_BY_DATE(:V_IM_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_FX_RATE_SCALED_GET_Async<T>(DateTime? V_IM_DATE,String V_MARGIN_GROUP,Decimal? V_HOLDING_PERIOD_ID) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_MARGIN_GROUP = new OracleParameter("V_MARGIN_GROUP", V_MARGIN_GROUP ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP.OracleDbType = OracleDbType.NVarchar2;
               

                OracleParameter p_V_HOLDING_PERIOD_ID = new OracleParameter("V_HOLDING_PERIOD_ID", V_HOLDING_PERIOD_ID ?? (object)DBNull.Value);
                p_V_HOLDING_PERIOD_ID.Direction = ParameterDirection.Input;
                p_V_HOLDING_PERIOD_ID.OracleDbType = OracleDbType.Decimal;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_FX_RATE_SCALED_GET(:V_IM_DATE, :V_MARGIN_GROUP, :V_HOLDING_PERIOD_ID); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_V_MARGIN_GROUP , p_V_HOLDING_PERIOD_ID  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_FX_RATE_SCALED_UPSERT_Async(Object TT__MD_FX_RATE_SCALED)
        {


                // Parameters

                OracleParameter p_TT__MD_FX_RATE_SCALED = new OracleParameter("TT__MD_FX_RATE_SCALED", TT__MD_FX_RATE_SCALED ?? (object)DBNull.Value);
                p_TT__MD_FX_RATE_SCALED.Direction = ParameterDirection.Input;
                p_TT__MD_FX_RATE_SCALED.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_FX_RATE_SCALED_UPSERT(:TT__MD_FX_RATE_SCALED); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_FX_RATE_SCALED  );
                    
                
        }


        public async Task<int> USP__MD_FX_RATE_UPSERT_Async(String V_MARGIN_GROUP,DateTime? V_IM_DATE,Object TT__MD_FX_RATE)
        {


                // Parameters

                OracleParameter p_V_MARGIN_GROUP = new OracleParameter("V_MARGIN_GROUP", V_MARGIN_GROUP ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP.OracleDbType = OracleDbType.NVarchar2;
               

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_TT__MD_FX_RATE = new OracleParameter("TT__MD_FX_RATE", TT__MD_FX_RATE ?? (object)DBNull.Value);
                p_TT__MD_FX_RATE.Direction = ParameterDirection.Input;
                p_TT__MD_FX_RATE.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_FX_RATE_UPSERT(:V_MARGIN_GROUP, :V_IM_DATE, :TT__MD_FX_RATE); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_V_MARGIN_GROUP , p_V_IM_DATE , p_TT__MD_FX_RATE  );
                    
                
        }


        public async Task<List<T>> USP__MD_HISTORICAL_DATES_GET_Async<T>(DateTime? V_IM_DATE,String V_MARGIN_GROUP) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_MARGIN_GROUP = new OracleParameter("V_MARGIN_GROUP", V_MARGIN_GROUP ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP.OracleDbType = OracleDbType.NVarchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_HISTORICAL_DATES_GET(:V_IM_DATE, :V_MARGIN_GROUP); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_V_MARGIN_GROUP  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_HISTORICAL_DATES_UPSERT_Async(String V_MARGIN_GROUP_NAME,DateTime? V_IM_DATE,byte[] V_HISTORICAL_DATES)
        {


                // Parameters

                OracleParameter p_V_MARGIN_GROUP_NAME = new OracleParameter("V_MARGIN_GROUP_NAME", V_MARGIN_GROUP_NAME ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP_NAME.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP_NAME.OracleDbType = OracleDbType.NVarchar2;
               

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_HISTORICAL_DATES = new OracleParameter("V_HISTORICAL_DATES", V_HISTORICAL_DATES ?? (object)DBNull.Value);
                p_V_HISTORICAL_DATES.Direction = ParameterDirection.Input;
                p_V_HISTORICAL_DATES.OracleDbType = OracleDbType.Blob;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_HISTORICAL_DATES_UPSERT(:V_MARGIN_GROUP_NAME, :V_IM_DATE, :V_HISTORICAL_DATES); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_V_MARGIN_GROUP_NAME , p_V_IM_DATE , p_V_HISTORICAL_DATES  );
                    
                
        }


        public async Task<List<T>> USP__MD_INSTRUMENT_GET_Async<T>(Object TT__MD_INSTRUMENT_KEY) where T : class
        {


                // Parameters

                OracleParameter p_TT__MD_INSTRUMENT_KEY = new OracleParameter("TT__MD_INSTRUMENT_KEY", TT__MD_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_TT__MD_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_TT__MD_INSTRUMENT_KEY.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_INSTRUMENT_GET(:TT__MD_INSTRUMENT_KEY); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_TT__MD_INSTRUMENT_KEY  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_INSTRUMENT_GET_INSTRUMENT_STATUS_Async<T>(DateTime? V_IM_DATE,Object TT__MD_INSTRUMENT_KEY) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_TT__MD_INSTRUMENT_KEY = new OracleParameter("TT__MD_INSTRUMENT_KEY", TT__MD_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_TT__MD_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_TT__MD_INSTRUMENT_KEY.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_INSTRUMENT_GET_INSTRUMENT_STATUS(:V_IM_DATE, :TT__MD_INSTRUMENT_KEY); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_TT__MD_INSTRUMENT_KEY  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_INSTRUMENT_UPSERT_Async(Object TT__MD_INSTRUMENT)
        {


                // Parameters

                OracleParameter p_TT__MD_INSTRUMENT = new OracleParameter("TT__MD_INSTRUMENT", TT__MD_INSTRUMENT ?? (object)DBNull.Value);
                p_TT__MD_INSTRUMENT.Direction = ParameterDirection.Input;
                p_TT__MD_INSTRUMENT.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_INSTRUMENT_UPSERT(:TT__MD_INSTRUMENT); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_INSTRUMENT  );
                    
                
        }


        public async Task<int> USP__MD_MARGIN_GROUP_UPSERT_Async(String V_MARGIN_GROUP_NAME,String V_PUBLICATION_GROUP)
        {


                // Parameters

                OracleParameter p_V_MARGIN_GROUP_NAME = new OracleParameter("V_MARGIN_GROUP_NAME", V_MARGIN_GROUP_NAME ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP_NAME.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP_NAME.OracleDbType = OracleDbType.NVarchar2;
               

                OracleParameter p_V_PUBLICATION_GROUP = new OracleParameter("V_PUBLICATION_GROUP", V_PUBLICATION_GROUP ?? (object)DBNull.Value);
                p_V_PUBLICATION_GROUP.Direction = ParameterDirection.Input;
                p_V_PUBLICATION_GROUP.OracleDbType = OracleDbType.NVarchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_MARGIN_GROUP_UPSERT(:V_MARGIN_GROUP_NAME, :V_PUBLICATION_GROUP); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_V_MARGIN_GROUP_NAME , p_V_PUBLICATION_GROUP  );
                    
                
        }


        public async Task<List<T>> USP__MD_PNL_GET_BY_INSTRUMENT_KEY_Async<T>(DateTime? V_IM_DATE,Object TT__MD_INSTRUMENT_KEY,Decimal? V_HOLDING_PERIOD_ID) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_TT__MD_INSTRUMENT_KEY = new OracleParameter("TT__MD_INSTRUMENT_KEY", TT__MD_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_TT__MD_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_TT__MD_INSTRUMENT_KEY.OracleDbType = OracleDbType.Object;
               

                OracleParameter p_V_HOLDING_PERIOD_ID = new OracleParameter("V_HOLDING_PERIOD_ID", V_HOLDING_PERIOD_ID ?? (object)DBNull.Value);
                p_V_HOLDING_PERIOD_ID.Direction = ParameterDirection.Input;
                p_V_HOLDING_PERIOD_ID.OracleDbType = OracleDbType.Decimal;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PNL_GET_BY_INSTRUMENT_KEY(:V_IM_DATE, :TT__MD_INSTRUMENT_KEY, :V_HOLDING_PERIOD_ID); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_TT__MD_INSTRUMENT_KEY , p_V_HOLDING_PERIOD_ID  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_PNL_UPSERT_Async(Object TT__MD_PNL)
        {


                // Parameters

                OracleParameter p_TT__MD_PNL = new OracleParameter("TT__MD_PNL", TT__MD_PNL ?? (object)DBNull.Value);
                p_TT__MD_PNL.Direction = ParameterDirection.Input;
                p_TT__MD_PNL.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PNL_UPSERT(:TT__MD_PNL); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_PNL  );
                    
                
        }


        public async Task<List<T>> USP__MD_PRODUCT_GET_Async<T>(DateTime? V_IM_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PRODUCT_GET(:V_IM_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_PRODUCT_UPSERT_Async(Object TT__MD_PRODUCT,DateTime? V_IM_DATE)
        {


                // Parameters

                OracleParameter p_TT__MD_PRODUCT = new OracleParameter("TT__MD_PRODUCT", TT__MD_PRODUCT ?? (object)DBNull.Value);
                p_TT__MD_PRODUCT.Direction = ParameterDirection.Input;
                p_TT__MD_PRODUCT.OracleDbType = OracleDbType.Object;
               

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PRODUCT_UPSERT(:TT__MD_PRODUCT, :V_IM_DATE); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_PRODUCT , p_V_IM_DATE  );
                    
                
        }


        public async Task<List<T>> USP__MD_REPORT_CONFIG_GET_Async<T>(DateTime? V_IM_DATE,String V_MARGIN_GROUP,Decimal? V_HOLDING_PERIOD) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_MARGIN_GROUP = new OracleParameter("V_MARGIN_GROUP", V_MARGIN_GROUP ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP.OracleDbType = OracleDbType.NVarchar2;
               

                OracleParameter p_V_HOLDING_PERIOD = new OracleParameter("V_HOLDING_PERIOD", V_HOLDING_PERIOD ?? (object)DBNull.Value);
                p_V_HOLDING_PERIOD.Direction = ParameterDirection.Input;
                p_V_HOLDING_PERIOD.OracleDbType = OracleDbType.Decimal;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_REPORT_CONFIG_GET(:V_IM_DATE, :V_MARGIN_GROUP, :V_HOLDING_PERIOD); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_V_MARGIN_GROUP , p_V_HOLDING_PERIOD  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_REPORT_CONFIG_UPSERT_Async(Object TT__MD_REPORT_CONFIG)
        {


                // Parameters

                OracleParameter p_TT__MD_REPORT_CONFIG = new OracleParameter("TT__MD_REPORT_CONFIG", TT__MD_REPORT_CONFIG ?? (object)DBNull.Value);
                p_TT__MD_REPORT_CONFIG.Direction = ParameterDirection.Input;
                p_TT__MD_REPORT_CONFIG.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_REPORT_CONFIG_UPSERT(:TT__MD_REPORT_CONFIG); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_REPORT_CONFIG  );
                    
                
        }


        public async Task<int> USP__MD_REPORT_HEADER_UPSERT_Async(DateTime? V_IM_DATE,DateTime? V_TXN_TM,String V_VERSION)
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_TXN_TM = new OracleParameter("V_TXN_TM", V_TXN_TM ?? (object)DBNull.Value);
                p_V_TXN_TM.Direction = ParameterDirection.Input;
                p_V_TXN_TM.OracleDbType = OracleDbType.TimeStamp;
               

                OracleParameter p_V_VERSION = new OracleParameter("V_VERSION", V_VERSION ?? (object)DBNull.Value);
                p_V_VERSION.Direction = ParameterDirection.Input;
                p_V_VERSION.OracleDbType = OracleDbType.NVarchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_REPORT_HEADER_UPSERT(:V_IM_DATE, :V_TXN_TM, :V_VERSION); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_V_IM_DATE , p_V_TXN_TM , p_V_VERSION  );
                    
                
        }


        public async Task<int> USP__LRC_REPRESENTATIVE_INSTRUMENT_UPSERT_Async(Object TT__LRC_REPRESENTATIVE_INSTRUMENT)
        {


                // Parameters

                OracleParameter p_TT__LRC_REPRESENTATIVE_INSTRUMENT = new OracleParameter("TT__LRC_REPRESENTATIVE_INSTRUMENT", TT__LRC_REPRESENTATIVE_INSTRUMENT ?? (object)DBNull.Value);
                p_TT__LRC_REPRESENTATIVE_INSTRUMENT.Direction = ParameterDirection.Input;
                p_TT__LRC_REPRESENTATIVE_INSTRUMENT.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__LRC_REPRESENTATIVE_INSTRUMENT_UPSERT(:TT__LRC_REPRESENTATIVE_INSTRUMENT); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__LRC_REPRESENTATIVE_INSTRUMENT  );
                    
                
        }


        public async Task<List<T>> USP__LRC_REPRESENTATIVE_INSTRUMENT_GET_Async<T>(String P_INSTRUMENT_KEY,DateTime? P_IM_DATE,String P_MARGINGROUP) where T : class
        {


                // Parameters

                OracleParameter p_P_INSTRUMENT_KEY = new OracleParameter("P_INSTRUMENT_KEY", P_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_P_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_P_INSTRUMENT_KEY.OracleDbType = OracleDbType.Varchar2;
               

                OracleParameter p_P_IM_DATE = new OracleParameter("P_IM_DATE", P_IM_DATE ?? (object)DBNull.Value);
                p_P_IM_DATE.Direction = ParameterDirection.Input;
                p_P_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_P_MARGINGROUP = new OracleParameter("P_MARGINGROUP", P_MARGINGROUP ?? (object)DBNull.Value);
                p_P_MARGINGROUP.Direction = ParameterDirection.Input;
                p_P_MARGINGROUP.OracleDbType = OracleDbType.Varchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__LRC_REPRESENTATIVE_INSTRUMENT_GET(:P_INSTRUMENT_KEY, :P_IM_DATE, :P_MARGINGROUP); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_P_INSTRUMENT_KEY , p_P_IM_DATE , p_P_MARGINGROUP  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__LRC_CONCENTRATION_CHARGE_GROUP_UPSERT_Async(Object TT__LRC_CONCENTRATION_CHARGE_GROUP)
        {


                // Parameters

                OracleParameter p_TT__LRC_CONCENTRATION_CHARGE_GROUP = new OracleParameter("TT__LRC_CONCENTRATION_CHARGE_GROUP", TT__LRC_CONCENTRATION_CHARGE_GROUP ?? (object)DBNull.Value);
                p_TT__LRC_CONCENTRATION_CHARGE_GROUP.Direction = ParameterDirection.Input;
                p_TT__LRC_CONCENTRATION_CHARGE_GROUP.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__LRC_CONCENTRATION_CHARGE_GROUP_UPSERT(:TT__LRC_CONCENTRATION_CHARGE_GROUP); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__LRC_CONCENTRATION_CHARGE_GROUP  );
                    
                
        }


        public async Task<List<T>> USP__LRC_CONCENTRATION_CHARGE_GROUP_GET_Async<T>(DateTime? V_IM_DATE,String V_CCG_NAME) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_CCG_NAME = new OracleParameter("V_CCG_NAME", V_CCG_NAME ?? (object)DBNull.Value);
                p_V_CCG_NAME.Direction = ParameterDirection.Input;
                p_V_CCG_NAME.OracleDbType = OracleDbType.Varchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__LRC_CONCENTRATION_CHARGE_GROUP_GET(:V_IM_DATE, :V_CCG_NAME); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_V_CCG_NAME  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_REPORT_HEADER_GET_Async<T>(DateTime? P_IMDATE) where T : class
        {


                // Parameters

                OracleParameter p_P_IMDATE = new OracleParameter("P_IMDATE", P_IMDATE ?? (object)DBNull.Value);
                p_P_IMDATE.Direction = ParameterDirection.Input;
                p_P_IMDATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_REPORT_HEADER_GET(:P_IMDATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_P_IMDATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__APP_CONFIG__GET_Async<T>() where T : class
        {



                // Processing 
                string sqlQuery = $@"BEGIN USP__APP_CONFIG__GET(); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__EOD_FILE_IMPORTER_SERVICE_LOG_ADD_Async(Object TT__EOD_FILE_IMPORTER_SERVICE_LOG)
        {


                // Parameters

                OracleParameter p_TT__EOD_FILE_IMPORTER_SERVICE_LOG = new OracleParameter("TT__EOD_FILE_IMPORTER_SERVICE_LOG", TT__EOD_FILE_IMPORTER_SERVICE_LOG ?? (object)DBNull.Value);
                p_TT__EOD_FILE_IMPORTER_SERVICE_LOG.Direction = ParameterDirection.Input;
                p_TT__EOD_FILE_IMPORTER_SERVICE_LOG.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__EOD_FILE_IMPORTER_SERVICE_LOG_ADD(:TT__EOD_FILE_IMPORTER_SERVICE_LOG); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__EOD_FILE_IMPORTER_SERVICE_LOG  );
                    
                
        }


        public async Task<List<T>> USP__EOD_FILE_IMPORTER_SERVICE_LOG_CLEARING_DESKTOP_GET_LOGS_Async<T>(DateTime? V_MIN_TIME,DateTime? V_MAX_TIME) where T : class
        {


                // Parameters

                OracleParameter p_V_MIN_TIME = new OracleParameter("V_MIN_TIME", V_MIN_TIME ?? (object)DBNull.Value);
                p_V_MIN_TIME.Direction = ParameterDirection.Input;
                p_V_MIN_TIME.OracleDbType = OracleDbType.TimeStamp;
               

                OracleParameter p_V_MAX_TIME = new OracleParameter("V_MAX_TIME", V_MAX_TIME ?? (object)DBNull.Value);
                p_V_MAX_TIME.Direction = ParameterDirection.Input;
                p_V_MAX_TIME.OracleDbType = OracleDbType.TimeStamp;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__EOD_FILE_IMPORTER_SERVICE_LOG_CLEARING_DESKTOP_GET_LOGS(:V_MIN_TIME, :V_MAX_TIME); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_MIN_TIME , p_V_MAX_TIME  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__EOD_FILE_IMPORTER_SERVICE_LOG_GET_BY_DATE_Async<T>(DateTime? V_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_DATE = new OracleParameter("V_DATE", V_DATE ?? (object)DBNull.Value);
                p_V_DATE.Direction = ParameterDirection.Input;
                p_V_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__EOD_FILE_IMPORTER_SERVICE_LOG_GET_BY_DATE(:V_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__EOD_FILE_IMPORTER_SERVICE_LOG_GET_BY_VALUATION_DATE_Async<T>(DateTime? V_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_DATE = new OracleParameter("V_DATE", V_DATE ?? (object)DBNull.Value);
                p_V_DATE.Direction = ParameterDirection.Input;
                p_V_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__EOD_FILE_IMPORTER_SERVICE_LOG_GET_BY_VALUATION_DATE(:V_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__GET_EOD_FILE_LATEST_N_IMPORTED_DATES_Async<T>(Decimal? V_NUMBER_OF_RECORDS) where T : class
        {


                // Parameters

                OracleParameter p_V_NUMBER_OF_RECORDS = new OracleParameter("V_NUMBER_OF_RECORDS", V_NUMBER_OF_RECORDS ?? (object)DBNull.Value);
                p_V_NUMBER_OF_RECORDS.Direction = ParameterDirection.Input;
                p_V_NUMBER_OF_RECORDS.OracleDbType = OracleDbType.Decimal;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__GET_EOD_FILE_LATEST_N_IMPORTED_DATES(:V_NUMBER_OF_RECORDS); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_NUMBER_OF_RECORDS  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP_DUMP_FILES_CONFIG_GET_Async<T>() where T : class
        {



                // Processing 
                string sqlQuery = $@"BEGIN USP_DUMP_FILES_CONFIG_GET(); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_PNL_GET_BY_IM_DATE_Async<T>(DateTime? V_IM_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PNL_GET_BY_IM_DATE(:V_IM_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_FX_RATE_SCALED_GET_BY_IM_DATE_Async<T>(DateTime? V_IM_DATE,String V_MARGIN_GROUP) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_MARGIN_GROUP = new OracleParameter("V_MARGIN_GROUP", V_MARGIN_GROUP ?? (object)DBNull.Value);
                p_V_MARGIN_GROUP.Direction = ParameterDirection.Input;
                p_V_MARGIN_GROUP.OracleDbType = OracleDbType.NVarchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_FX_RATE_SCALED_GET_BY_IM_DATE(:V_IM_DATE, :V_MARGIN_GROUP); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_V_MARGIN_GROUP  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_REPORT_CONFIG_GET_BY_IM_DATE_Async<T>(DateTime? V_IM_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_REPORT_CONFIG_GET_BY_IM_DATE(:V_IM_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<int> USP__MD_INSTRUMENT_DAILY_MARGIN_OVERRIDE_UPSERT_Async(Object TT__MD_DAILY_INSTRUMENT_MO)
        {


                // Parameters

                OracleParameter p_TT__MD_DAILY_INSTRUMENT_MO = new OracleParameter("TT__MD_DAILY_INSTRUMENT_MO", TT__MD_DAILY_INSTRUMENT_MO ?? (object)DBNull.Value);
                p_TT__MD_DAILY_INSTRUMENT_MO.Direction = ParameterDirection.Input;
                p_TT__MD_DAILY_INSTRUMENT_MO.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_INSTRUMENT_DAILY_MARGIN_OVERRIDE_UPSERT(:TT__MD_DAILY_INSTRUMENT_MO); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT__MD_DAILY_INSTRUMENT_MO  );
                    
                
        }


        public async Task<int> USP__MD_PRODUCT_DAILY_MARGIN_OVERRIDE_UPSERT_Async(Object TT_MD_DAILY_PRODUCT_MO)
        {


                // Parameters

                OracleParameter p_TT_MD_DAILY_PRODUCT_MO = new OracleParameter("TT_MD_DAILY_PRODUCT_MO", TT_MD_DAILY_PRODUCT_MO ?? (object)DBNull.Value);
                p_TT_MD_DAILY_PRODUCT_MO.Direction = ParameterDirection.Input;
                p_TT_MD_DAILY_PRODUCT_MO.OracleDbType = OracleDbType.Object;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PRODUCT_DAILY_MARGIN_OVERRIDE_UPSERT(:TT_MD_DAILY_PRODUCT_MO); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT_MD_DAILY_PRODUCT_MO  );
                    
                
        }


        public async Task<int> USP__MD_INSTRUMENT_DAILY_MARGIN_OVERRIDE_DELETE_Async(Object TT_MD_INSTRUMENT_KEY,DateTime? V_IM_DATE)
        {


                // Parameters

                OracleParameter p_TT_MD_INSTRUMENT_KEY = new OracleParameter("TT_MD_INSTRUMENT_KEY", TT_MD_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_TT_MD_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_TT_MD_INSTRUMENT_KEY.OracleDbType = OracleDbType.Object;
               

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_INSTRUMENT_DAILY_MARGIN_OVERRIDE_DELETE(:TT_MD_INSTRUMENT_KEY, :V_IM_DATE); END;";


                

                
                   
                return await this.Database.ExecuteSqlRawAsync(sqlQuery , p_TT_MD_INSTRUMENT_KEY , p_V_IM_DATE  );
                    
                
        }


        public async Task<List<T>> USP__MD_REPORT_CONFIG_GET_BY_PUBLICATION_GROUP_Async<T>(DateTime? V_IM_DATE,String V_PUBLICATION_GROUP) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               

                OracleParameter p_V_PUBLICATION_GROUP = new OracleParameter("V_PUBLICATION_GROUP", V_PUBLICATION_GROUP ?? (object)DBNull.Value);
                p_V_PUBLICATION_GROUP.Direction = ParameterDirection.Input;
                p_V_PUBLICATION_GROUP.OracleDbType = OracleDbType.NVarchar2;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_REPORT_CONFIG_GET_BY_PUBLICATION_GROUP(:V_IM_DATE, :V_PUBLICATION_GROUP); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE , p_V_PUBLICATION_GROUP  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_INSTRUMENT_DAILY_MARGIN_OVERRIDE_GET_Async<T>(Object TT__MD_INSTRUMENT_KEY,DateTime? V_IM_DATE) where T : class
        {


                // Parameters

                OracleParameter p_TT__MD_INSTRUMENT_KEY = new OracleParameter("TT__MD_INSTRUMENT_KEY", TT__MD_INSTRUMENT_KEY ?? (object)DBNull.Value);
                p_TT__MD_INSTRUMENT_KEY.Direction = ParameterDirection.Input;
                p_TT__MD_INSTRUMENT_KEY.OracleDbType = OracleDbType.Object;
               

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_INSTRUMENT_DAILY_MARGIN_OVERRIDE_GET(:TT__MD_INSTRUMENT_KEY, :V_IM_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_TT__MD_INSTRUMENT_KEY , p_V_IM_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }


        public async Task<List<T>> USP__MD_PRODUCT_DAILY_MARGIN_OVERRIDE_GET_Async<T>(DateTime? V_IM_DATE) where T : class
        {


                // Parameters

                OracleParameter p_V_IM_DATE = new OracleParameter("V_IM_DATE", V_IM_DATE ?? (object)DBNull.Value);
                p_V_IM_DATE.Direction = ParameterDirection.Input;
                p_V_IM_DATE.OracleDbType = OracleDbType.Date;
               


                // Processing 
                string sqlQuery = $@"BEGIN USP__MD_PRODUCT_DAILY_MARGIN_OVERRIDE_GET(:V_IM_DATE); END;";


                
                   
                //Execution
                var res = this.Set<T>().FromSqlRaw(sqlQuery , p_V_IM_DATE  );

                return await res.ToListAsync(); 
                    
                

                
        }



    }
}